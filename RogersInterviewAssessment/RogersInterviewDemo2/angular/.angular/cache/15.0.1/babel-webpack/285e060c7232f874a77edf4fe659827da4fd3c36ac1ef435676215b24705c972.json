{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { useRef } from \"react\";\nimport { equal } from \"@wry/equality\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nexport function useFragment_experimental(options) {\n  var cache = useApolloClient().cache;\n  var fragment = options.fragment,\n    fragmentName = options.fragmentName,\n    from = options.from,\n    _a = options.optimistic,\n    optimistic = _a === void 0 ? true : _a,\n    rest = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n  var diffOptions = __assign(__assign({}, rest), {\n    id: typeof from === \"string\" ? from : cache.identify(from),\n    query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n    optimistic: optimistic\n  });\n  var resultRef = useRef();\n  var latestDiff = cache.diff(diffOptions);\n  return useSyncExternalStore(function (forceUpdate) {\n    return cache.watch(__assign(__assign({}, diffOptions), {\n      immediate: true,\n      callback: function (diff) {\n        if (!equal(diff, latestDiff)) {\n          resultRef.current = diffToResult(latestDiff = diff);\n          forceUpdate();\n        }\n      }\n    }));\n  }, function () {\n    var latestDiffToResult = diffToResult(latestDiff);\n    return resultRef.current && equal(resultRef.current.data, latestDiffToResult.data) ? resultRef.current : resultRef.current = latestDiffToResult;\n  });\n}\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n  return result;\n}","map":{"version":3,"names":["__assign","__rest","useRef","equal","mergeDeepArray","useApolloClient","useSyncExternalStore","useFragment_experimental","options","cache","fragment","fragmentName","from","_a","optimistic","rest","diffOptions","id","identify","query","resultRef","latestDiff","diff","forceUpdate","watch","immediate","callback","current","diffToResult","latestDiffToResult","data","result","complete","missing","map","error"],"sources":["C:/Users/Arvind/Documents/RogersInterviewDemo2/angular/node_modules/@apollo/client/react/hooks/useFragment.js"],"sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { useRef } from \"react\";\nimport { equal } from \"@wry/equality\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nexport function useFragment_experimental(options) {\n    var cache = useApolloClient().cache;\n    var fragment = options.fragment, fragmentName = options.fragmentName, from = options.from, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, rest = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n    var diffOptions = __assign(__assign({}, rest), { id: typeof from === \"string\" ? from : cache.identify(from), query: cache[\"getFragmentDoc\"](fragment, fragmentName), optimistic: optimistic });\n    var resultRef = useRef();\n    var latestDiff = cache.diff(diffOptions);\n    return useSyncExternalStore(function (forceUpdate) {\n        return cache.watch(__assign(__assign({}, diffOptions), { immediate: true, callback: function (diff) {\n                if (!equal(diff, latestDiff)) {\n                    resultRef.current = diffToResult(latestDiff = diff);\n                    forceUpdate();\n                }\n            } }));\n    }, function () {\n        var latestDiffToResult = diffToResult(latestDiff);\n        return resultRef.current &&\n            equal(resultRef.current.data, latestDiffToResult.data)\n            ? resultRef.current\n            : (resultRef.current = latestDiffToResult);\n    });\n}\nfunction diffToResult(diff) {\n    var result = {\n        data: diff.result,\n        complete: !!diff.complete,\n    };\n    if (diff.missing) {\n        result.missing = mergeDeepArray(diff.missing.map(function (error) { return error.missing; }));\n    }\n    return result;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACxC,SAASC,MAAM,QAAQ,OAAO;AAC9B,SAASC,KAAK,QAAQ,eAAe;AACrC,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,eAAe,QAAQ,sBAAsB;AACtD,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,OAAO,SAASC,wBAAwB,CAACC,OAAO,EAAE;EAC9C,IAAIC,KAAK,GAAGJ,eAAe,EAAE,CAACI,KAAK;EACnC,IAAIC,QAAQ,GAAGF,OAAO,CAACE,QAAQ;IAAEC,YAAY,GAAGH,OAAO,CAACG,YAAY;IAAEC,IAAI,GAAGJ,OAAO,CAACI,IAAI;IAAEC,EAAE,GAAGL,OAAO,CAACM,UAAU;IAAEA,UAAU,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,IAAI,GAAGA,EAAE;IAAEE,IAAI,GAAGd,MAAM,CAACO,OAAO,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;EACtO,IAAIQ,WAAW,GAAGhB,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEe,IAAI,CAAC,EAAE;IAAEE,EAAE,EAAE,OAAOL,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGH,KAAK,CAACS,QAAQ,CAACN,IAAI,CAAC;IAAEO,KAAK,EAAEV,KAAK,CAAC,gBAAgB,CAAC,CAACC,QAAQ,EAAEC,YAAY,CAAC;IAAEG,UAAU,EAAEA;EAAW,CAAC,CAAC;EAC9L,IAAIM,SAAS,GAAGlB,MAAM,EAAE;EACxB,IAAImB,UAAU,GAAGZ,KAAK,CAACa,IAAI,CAACN,WAAW,CAAC;EACxC,OAAOV,oBAAoB,CAAC,UAAUiB,WAAW,EAAE;IAC/C,OAAOd,KAAK,CAACe,KAAK,CAACxB,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEgB,WAAW,CAAC,EAAE;MAAES,SAAS,EAAE,IAAI;MAAEC,QAAQ,EAAE,UAAUJ,IAAI,EAAE;QAC5F,IAAI,CAACnB,KAAK,CAACmB,IAAI,EAAED,UAAU,CAAC,EAAE;UAC1BD,SAAS,CAACO,OAAO,GAAGC,YAAY,CAACP,UAAU,GAAGC,IAAI,CAAC;UACnDC,WAAW,EAAE;QACjB;MACJ;IAAE,CAAC,CAAC,CAAC;EACb,CAAC,EAAE,YAAY;IACX,IAAIM,kBAAkB,GAAGD,YAAY,CAACP,UAAU,CAAC;IACjD,OAAOD,SAAS,CAACO,OAAO,IACpBxB,KAAK,CAACiB,SAAS,CAACO,OAAO,CAACG,IAAI,EAAED,kBAAkB,CAACC,IAAI,CAAC,GACpDV,SAAS,CAACO,OAAO,GAChBP,SAAS,CAACO,OAAO,GAAGE,kBAAmB;EAClD,CAAC,CAAC;AACN;AACA,SAASD,YAAY,CAACN,IAAI,EAAE;EACxB,IAAIS,MAAM,GAAG;IACTD,IAAI,EAAER,IAAI,CAACS,MAAM;IACjBC,QAAQ,EAAE,CAAC,CAACV,IAAI,CAACU;EACrB,CAAC;EACD,IAAIV,IAAI,CAACW,OAAO,EAAE;IACdF,MAAM,CAACE,OAAO,GAAG7B,cAAc,CAACkB,IAAI,CAACW,OAAO,CAACC,GAAG,CAAC,UAAUC,KAAK,EAAE;MAAE,OAAOA,KAAK,CAACF,OAAO;IAAE,CAAC,CAAC,CAAC;EACjG;EACA,OAAOF,MAAM;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}