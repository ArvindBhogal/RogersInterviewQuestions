{"ast":null,"code":"import { Injectable, NgModule } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { print } from 'graphql';\nimport { prioritize, mergeHeaders, fetch } from 'apollo-angular-link-http-common';\nimport { extractFiles } from 'extract-files';\n\n// XXX find a better name for it\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nclass HttpLinkHandler extends ApolloLink {\n  constructor(httpClient, options) {\n    super();\n    this.httpClient = httpClient;\n    this.options = options;\n    this.requester = operation => new Observable(observer => {\n      const context = operation.getContext();\n      // decides which value to pick, Context, Options or to just use the default\n      const pick = (key, init) => {\n        return prioritize(context[key], this.options[key], init);\n      };\n      const includeQuery = pick('includeQuery', true);\n      const includeExtensions = pick('includeExtensions', false);\n      const method = pick('method', 'POST');\n      const url = pick('uri', 'graphql');\n      const withCredentials = pick('withCredentials');\n      const useMultipart = pick('useMultipart');\n      const req = {\n        method,\n        url: typeof url === 'function' ? url(operation) : url,\n        body: {\n          operationName: operation.operationName,\n          variables: operation.variables\n        },\n        options: {\n          withCredentials,\n          useMultipart,\n          headers: this.options.headers\n        }\n      };\n      if (includeExtensions) {\n        req.body.extensions = operation.extensions;\n      }\n      if (includeQuery) {\n        req.body.query = print(operation.query);\n      }\n      if (context.headers) {\n        req.options.headers = mergeHeaders(req.options.headers, context.headers);\n      }\n      const sub = fetch(req, this.httpClient, extractFiles).subscribe({\n        next: response => {\n          operation.setContext({\n            response\n          });\n          observer.next(response.body);\n        },\n        error: err => observer.error(err),\n        complete: () => observer.complete()\n      });\n      return () => {\n        if (!sub.closed) {\n          sub.unsubscribe();\n        }\n      };\n    });\n  }\n  request(op) {\n    return this.requester(op);\n  }\n}\nclass HttpLink {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  create(options) {\n    return new HttpLinkHandler(this.httpClient, options);\n  }\n}\nHttpLink.ɵfac = function HttpLink_Factory(t) {\n  return new (t || HttpLink)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient));\n};\nHttpLink.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: HttpLink,\n  factory: HttpLink.ɵfac\n});\nHttpLink.ctorParameters = () => [{\n  type: HttpClient\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpLink, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }];\n  }, null);\n})();\nconst PROVIDERS = [HttpLink];\nclass HttpLinkModule {}\nHttpLinkModule.ɵfac = function HttpLinkModule_Factory(t) {\n  return new (t || HttpLinkModule)();\n};\nHttpLinkModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: HttpLinkModule\n});\nHttpLinkModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: PROVIDERS\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpLinkModule, [{\n    type: NgModule,\n    args: [{\n      providers: PROVIDERS\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HttpLink, HttpLinkHandler, HttpLinkModule, PROVIDERS };","map":{"version":3,"names":["Injectable","NgModule","HttpClient","ApolloLink","Observable","print","prioritize","mergeHeaders","fetch","extractFiles","ɵngcc0","ɵngcc1","HttpLinkHandler","constructor","httpClient","options","requester","operation","observer","context","getContext","pick","key","init","includeQuery","includeExtensions","method","url","withCredentials","useMultipart","req","body","operationName","variables","headers","extensions","query","sub","subscribe","next","response","setContext","error","err","complete","closed","unsubscribe","request","op","HttpLink","create","ɵfac","HttpLink_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ctorParameters","type","ngDevMode","ɵsetClassMetadata","PROVIDERS","HttpLinkModule","HttpLinkModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","args"],"sources":["C:/Users/Arvind/Documents/RogersInterviewDemo2/angular/node_modules/apollo-angular-link-http/__ivy_ngcc__/fesm2015/ngApolloLinkHttp.js"],"sourcesContent":["import { Injectable, NgModule } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { print } from 'graphql';\nimport { prioritize, mergeHeaders, fetch } from 'apollo-angular-link-http-common';\nimport { extractFiles } from 'extract-files';\n\n// XXX find a better name for it\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nclass HttpLinkHandler extends ApolloLink {\n    constructor(httpClient, options) {\n        super();\n        this.httpClient = httpClient;\n        this.options = options;\n        this.requester = (operation) => new Observable((observer) => {\n            const context = operation.getContext();\n            // decides which value to pick, Context, Options or to just use the default\n            const pick = (key, init) => {\n                return prioritize(context[key], this.options[key], init);\n            };\n            const includeQuery = pick('includeQuery', true);\n            const includeExtensions = pick('includeExtensions', false);\n            const method = pick('method', 'POST');\n            const url = pick('uri', 'graphql');\n            const withCredentials = pick('withCredentials');\n            const useMultipart = pick('useMultipart');\n            const req = {\n                method,\n                url: typeof url === 'function' ? url(operation) : url,\n                body: {\n                    operationName: operation.operationName,\n                    variables: operation.variables,\n                },\n                options: {\n                    withCredentials,\n                    useMultipart,\n                    headers: this.options.headers,\n                },\n            };\n            if (includeExtensions) {\n                req.body.extensions = operation.extensions;\n            }\n            if (includeQuery) {\n                req.body.query = print(operation.query);\n            }\n            if (context.headers) {\n                req.options.headers = mergeHeaders(req.options.headers, context.headers);\n            }\n            const sub = fetch(req, this.httpClient, extractFiles).subscribe({\n                next: (response) => {\n                    operation.setContext({ response });\n                    observer.next(response.body);\n                },\n                error: (err) => observer.error(err),\n                complete: () => observer.complete(),\n            });\n            return () => {\n                if (!sub.closed) {\n                    sub.unsubscribe();\n                }\n            };\n        });\n    }\n    request(op) {\n        return this.requester(op);\n    }\n}\nclass HttpLink {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n    }\n    create(options) {\n        return new HttpLinkHandler(this.httpClient, options);\n    }\n}\nHttpLink.ɵfac = function HttpLink_Factory(t) { return new (t || HttpLink)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };\nHttpLink.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpLink, factory: HttpLink.ɵfac });\nHttpLink.ctorParameters = () => [\n    { type: HttpClient }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpLink, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();\n\nconst PROVIDERS = [HttpLink];\nclass HttpLinkModule {\n}\nHttpLinkModule.ɵfac = function HttpLinkModule_Factory(t) { return new (t || HttpLinkModule)(); };\nHttpLinkModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpLinkModule });\nHttpLinkModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: PROVIDERS });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpLinkModule, [{\n        type: NgModule,\n        args: [{\n                providers: PROVIDERS\n            }]\n    }], null, null); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HttpLink, HttpLinkHandler, HttpLinkModule, PROVIDERS };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}