{"ast":null,"code":"import { __extends } from 'tslib';\nvar genericMessage = \"Invariant Violation\";\nvar _a = Object.setPrototypeOf,\n  setPrototypeOf = _a === void 0 ? function (obj, proto) {\n    obj.__proto__ = proto;\n    return obj;\n  } : _a;\nvar InvariantError = /** @class */function (_super) {\n  __extends(InvariantError, _super);\n  function InvariantError(message) {\n    if (message === void 0) {\n      message = genericMessage;\n    }\n    var _this = _super.call(this, typeof message === \"number\" ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\" : message) || this;\n    _this.framesToPop = 1;\n    _this.name = genericMessage;\n    setPrototypeOf(_this, InvariantError.prototype);\n    return _this;\n  }\n  return InvariantError;\n}(Error);\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\nfunction wrapConsoleMethod(method) {\n  return function () {\n    return console[method].apply(console, arguments);\n  };\n}\n(function (invariant) {\n  invariant.warn = wrapConsoleMethod(\"warn\");\n  invariant.error = wrapConsoleMethod(\"error\");\n})(invariant || (invariant = {}));\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\n// However, because most ESM-to-CJS compilers will rewrite the process import\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\n// also attempt to define the stub globally when it is not already defined.\nvar processStub = {\n  env: {}\n};\nif (typeof process === \"object\") {\n  processStub = process;\n} else try {\n  // Using Function to evaluate this assignment in global scope also escapes\n  // the strict mode of the current module, thereby allowing the assignment.\n  // Inspired by https://github.com/facebook/regenerator/pull/369.\n  Function(\"stub\", \"process = stub\")(processStub);\n} catch (atLeastWeTried) {\n  // The assignment can fail if a Content Security Policy heavy-handedly\n  // forbids Function usage. In those environments, developers should take\n  // extra care to replace process.env.NODE_ENV in their production builds,\n  // or define an appropriate global.process polyfill.\n}\nvar invariant$1 = invariant;\nexport default invariant$1;\nexport { InvariantError, invariant, processStub as process };","map":{"version":3,"names":["__extends","genericMessage","_a","Object","setPrototypeOf","obj","proto","__proto__","InvariantError","_super","message","_this","call","framesToPop","name","prototype","Error","invariant","condition","wrapConsoleMethod","method","console","apply","arguments","warn","error","processStub","env","process","Function","atLeastWeTried","invariant$1"],"sources":["C:/Users/Arvind/Documents/RogersInterviewDemo2/angular/node_modules/apollo-link/node_modules/ts-invariant/lib/invariant.esm.js"],"sourcesContent":["import { __extends } from 'tslib';\n\nvar genericMessage = \"Invariant Violation\";\r\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\r\n    obj.__proto__ = proto;\r\n    return obj;\r\n} : _a;\r\nvar InvariantError = /** @class */ (function (_super) {\r\n    __extends(InvariantError, _super);\r\n    function InvariantError(message) {\r\n        if (message === void 0) { message = genericMessage; }\r\n        var _this = _super.call(this, typeof message === \"number\"\r\n            ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\"\r\n            : message) || this;\r\n        _this.framesToPop = 1;\r\n        _this.name = genericMessage;\r\n        setPrototypeOf(_this, InvariantError.prototype);\r\n        return _this;\r\n    }\r\n    return InvariantError;\r\n}(Error));\r\nfunction invariant(condition, message) {\r\n    if (!condition) {\r\n        throw new InvariantError(message);\r\n    }\r\n}\r\nfunction wrapConsoleMethod(method) {\r\n    return function () {\r\n        return console[method].apply(console, arguments);\r\n    };\r\n}\r\n(function (invariant) {\r\n    invariant.warn = wrapConsoleMethod(\"warn\");\r\n    invariant.error = wrapConsoleMethod(\"error\");\r\n})(invariant || (invariant = {}));\r\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\r\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\r\n// However, because most ESM-to-CJS compilers will rewrite the process import\r\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\r\n// also attempt to define the stub globally when it is not already defined.\r\nvar processStub = { env: {} };\r\nif (typeof process === \"object\") {\r\n    processStub = process;\r\n}\r\nelse\r\n    try {\r\n        // Using Function to evaluate this assignment in global scope also escapes\r\n        // the strict mode of the current module, thereby allowing the assignment.\r\n        // Inspired by https://github.com/facebook/regenerator/pull/369.\r\n        Function(\"stub\", \"process = stub\")(processStub);\r\n    }\r\n    catch (atLeastWeTried) {\r\n        // The assignment can fail if a Content Security Policy heavy-handedly\r\n        // forbids Function usage. In those environments, developers should take\r\n        // extra care to replace process.env.NODE_ENV in their production builds,\r\n        // or define an appropriate global.process polyfill.\r\n    }\r\nvar invariant$1 = invariant;\n\nexport default invariant$1;\nexport { InvariantError, invariant, processStub as process };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,IAAIC,cAAc,GAAG,qBAAqB;AAC1C,IAAIC,EAAE,GAAGC,MAAM,CAACC,cAAc;EAAEA,cAAc,GAAGF,EAAE,KAAK,KAAK,CAAC,GAAG,UAAUG,GAAG,EAAEC,KAAK,EAAE;IACnFD,GAAG,CAACE,SAAS,GAAGD,KAAK;IACrB,OAAOD,GAAG;EACd,CAAC,GAAGH,EAAE;AACN,IAAIM,cAAc,GAAG,aAAe,UAAUC,MAAM,EAAE;EAClDT,SAAS,CAACQ,cAAc,EAAEC,MAAM,CAAC;EACjC,SAASD,cAAc,CAACE,OAAO,EAAE;IAC7B,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;MAAEA,OAAO,GAAGT,cAAc;IAAE;IACpD,IAAIU,KAAK,GAAGF,MAAM,CAACG,IAAI,CAAC,IAAI,EAAE,OAAOF,OAAO,KAAK,QAAQ,GACnDT,cAAc,GAAG,IAAI,GAAGS,OAAO,GAAG,4DAA4D,GAC9FA,OAAO,CAAC,IAAI,IAAI;IACtBC,KAAK,CAACE,WAAW,GAAG,CAAC;IACrBF,KAAK,CAACG,IAAI,GAAGb,cAAc;IAC3BG,cAAc,CAACO,KAAK,EAAEH,cAAc,CAACO,SAAS,CAAC;IAC/C,OAAOJ,KAAK;EAChB;EACA,OAAOH,cAAc;AACzB,CAAC,CAACQ,KAAK,CAAE;AACT,SAASC,SAAS,CAACC,SAAS,EAAER,OAAO,EAAE;EACnC,IAAI,CAACQ,SAAS,EAAE;IACZ,MAAM,IAAIV,cAAc,CAACE,OAAO,CAAC;EACrC;AACJ;AACA,SAASS,iBAAiB,CAACC,MAAM,EAAE;EAC/B,OAAO,YAAY;IACf,OAAOC,OAAO,CAACD,MAAM,CAAC,CAACE,KAAK,CAACD,OAAO,EAAEE,SAAS,CAAC;EACpD,CAAC;AACL;AACA,CAAC,UAAUN,SAAS,EAAE;EAClBA,SAAS,CAACO,IAAI,GAAGL,iBAAiB,CAAC,MAAM,CAAC;EAC1CF,SAAS,CAACQ,KAAK,GAAGN,iBAAiB,CAAC,OAAO,CAAC;AAChD,CAAC,EAAEF,SAAS,KAAKA,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA,IAAIS,WAAW,GAAG;EAAEC,GAAG,EAAE,CAAC;AAAE,CAAC;AAC7B,IAAI,OAAOC,OAAO,KAAK,QAAQ,EAAE;EAC7BF,WAAW,GAAGE,OAAO;AACzB,CAAC,MAEG,IAAI;EACA;EACA;EACA;EACAC,QAAQ,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAACH,WAAW,CAAC;AACnD,CAAC,CACD,OAAOI,cAAc,EAAE;EACnB;EACA;EACA;EACA;AAAA;AAER,IAAIC,WAAW,GAAGd,SAAS;AAE3B,eAAec,WAAW;AAC1B,SAASvB,cAAc,EAAES,SAAS,EAAES,WAAW,IAAIE,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}