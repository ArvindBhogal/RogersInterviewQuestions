{"ast":null,"code":"var _a = Object.prototype,\n  toString = _a.toString,\n  hasOwnProperty = _a.hasOwnProperty;\nvar previousComparisons = new Map();\n/**\r\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\r\n */\nfunction equal(a, b) {\n  try {\n    return check(a, b);\n  } finally {\n    previousComparisons.clear();\n  }\n}\nfunction check(a, b) {\n  // If the two values are strictly equal, our job is easy.\n  if (a === b) {\n    return true;\n  }\n  // Object.prototype.toString returns a representation of the runtime type of\n  // the given value that is considerably more precise than typeof.\n  var aTag = toString.call(a);\n  var bTag = toString.call(b);\n  // If the runtime types of a and b are different, they could maybe be equal\n  // under some interpretation of equality, but for simplicity and performance\n  // we just return false instead.\n  if (aTag !== bTag) {\n    return false;\n  }\n  switch (aTag) {\n    case '[object Array]':\n      // Arrays are a lot like other objects, but we can cheaply compare their\n      // lengths as a short-cut before comparing their elements.\n      if (a.length !== b.length) return false;\n    // Fall through to object case...\n    case '[object Object]':\n      {\n        if (previouslyCompared(a, b)) return true;\n        var aKeys = Object.keys(a);\n        var bKeys = Object.keys(b);\n        // If `a` and `b` have a different number of enumerable keys, they\n        // must be different.\n        var keyCount = aKeys.length;\n        if (keyCount !== bKeys.length) return false;\n        // Now make sure they have the same keys.\n        for (var k = 0; k < keyCount; ++k) {\n          if (!hasOwnProperty.call(b, aKeys[k])) {\n            return false;\n          }\n        }\n        // Finally, check deep equality of all child properties.\n        for (var k = 0; k < keyCount; ++k) {\n          var key = aKeys[k];\n          if (!check(a[key], b[key])) {\n            return false;\n          }\n        }\n        return true;\n      }\n    case '[object Error]':\n      return a.name === b.name && a.message === b.message;\n    case '[object Number]':\n      // Handle NaN, which is !== itself.\n      if (a !== a) return b !== b;\n    // Fall through to shared +a === +b case...\n    case '[object Boolean]':\n    case '[object Date]':\n      return +a === +b;\n    case '[object RegExp]':\n    case '[object String]':\n      return a == \"\" + b;\n    case '[object Map]':\n    case '[object Set]':\n      {\n        if (a.size !== b.size) return false;\n        if (previouslyCompared(a, b)) return true;\n        var aIterator = a.entries();\n        var isMap = aTag === '[object Map]';\n        while (true) {\n          var info = aIterator.next();\n          if (info.done) break;\n          // If a instanceof Set, aValue === aKey.\n          var _a = info.value,\n            aKey = _a[0],\n            aValue = _a[1];\n          // So this works the same way for both Set and Map.\n          if (!b.has(aKey)) {\n            return false;\n          }\n          // However, we care about deep equality of values only when dealing\n          // with Map structures.\n          if (isMap && !check(aValue, b.get(aKey))) {\n            return false;\n          }\n        }\n        return true;\n      }\n  }\n  // Otherwise the values are not equal.\n  return false;\n}\nfunction previouslyCompared(a, b) {\n  // Though cyclic references can make an object graph appear infinite from the\n  // perspective of a depth-first traversal, the graph still contains a finite\n  // number of distinct object references. We use the previousComparisons cache\n  // to avoid comparing the same pair of object references more than once, which\n  // guarantees termination (even if we end up comparing every object in one\n  // graph to every object in the other graph, which is extremely unlikely),\n  // while still allowing weird isomorphic structures (like rings with different\n  // lengths) a chance to pass the equality test.\n  var bSet = previousComparisons.get(a);\n  if (bSet) {\n    // Return true here because we can be sure false will be returned somewhere\n    // else if the objects are not equivalent.\n    if (bSet.has(b)) return true;\n  } else {\n    previousComparisons.set(a, bSet = new Set());\n  }\n  bSet.add(b);\n  return false;\n}\nexport default equal;\nexport { equal };","map":{"version":3,"names":["_a","Object","prototype","toString","hasOwnProperty","previousComparisons","Map","equal","a","b","check","clear","aTag","call","bTag","length","previouslyCompared","aKeys","keys","bKeys","keyCount","k","key","name","message","size","aIterator","entries","isMap","info","next","done","value","aKey","aValue","has","get","bSet","set","Set","add"],"sources":["C:/Users/Arvind/Documents/RogersInterviewDemo2/angular/node_modules/apollo-utilities/node_modules/@wry/equality/lib/equality.esm.js"],"sourcesContent":["var _a = Object.prototype, toString = _a.toString, hasOwnProperty = _a.hasOwnProperty;\r\nvar previousComparisons = new Map();\r\n/**\r\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\r\n */\r\nfunction equal(a, b) {\r\n    try {\r\n        return check(a, b);\r\n    }\r\n    finally {\r\n        previousComparisons.clear();\r\n    }\r\n}\r\nfunction check(a, b) {\r\n    // If the two values are strictly equal, our job is easy.\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    // Object.prototype.toString returns a representation of the runtime type of\r\n    // the given value that is considerably more precise than typeof.\r\n    var aTag = toString.call(a);\r\n    var bTag = toString.call(b);\r\n    // If the runtime types of a and b are different, they could maybe be equal\r\n    // under some interpretation of equality, but for simplicity and performance\r\n    // we just return false instead.\r\n    if (aTag !== bTag) {\r\n        return false;\r\n    }\r\n    switch (aTag) {\r\n        case '[object Array]':\r\n            // Arrays are a lot like other objects, but we can cheaply compare their\r\n            // lengths as a short-cut before comparing their elements.\r\n            if (a.length !== b.length)\r\n                return false;\r\n        // Fall through to object case...\r\n        case '[object Object]': {\r\n            if (previouslyCompared(a, b))\r\n                return true;\r\n            var aKeys = Object.keys(a);\r\n            var bKeys = Object.keys(b);\r\n            // If `a` and `b` have a different number of enumerable keys, they\r\n            // must be different.\r\n            var keyCount = aKeys.length;\r\n            if (keyCount !== bKeys.length)\r\n                return false;\r\n            // Now make sure they have the same keys.\r\n            for (var k = 0; k < keyCount; ++k) {\r\n                if (!hasOwnProperty.call(b, aKeys[k])) {\r\n                    return false;\r\n                }\r\n            }\r\n            // Finally, check deep equality of all child properties.\r\n            for (var k = 0; k < keyCount; ++k) {\r\n                var key = aKeys[k];\r\n                if (!check(a[key], b[key])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        case '[object Error]':\r\n            return a.name === b.name && a.message === b.message;\r\n        case '[object Number]':\r\n            // Handle NaN, which is !== itself.\r\n            if (a !== a)\r\n                return b !== b;\r\n        // Fall through to shared +a === +b case...\r\n        case '[object Boolean]':\r\n        case '[object Date]':\r\n            return +a === +b;\r\n        case '[object RegExp]':\r\n        case '[object String]':\r\n            return a == \"\" + b;\r\n        case '[object Map]':\r\n        case '[object Set]': {\r\n            if (a.size !== b.size)\r\n                return false;\r\n            if (previouslyCompared(a, b))\r\n                return true;\r\n            var aIterator = a.entries();\r\n            var isMap = aTag === '[object Map]';\r\n            while (true) {\r\n                var info = aIterator.next();\r\n                if (info.done)\r\n                    break;\r\n                // If a instanceof Set, aValue === aKey.\r\n                var _a = info.value, aKey = _a[0], aValue = _a[1];\r\n                // So this works the same way for both Set and Map.\r\n                if (!b.has(aKey)) {\r\n                    return false;\r\n                }\r\n                // However, we care about deep equality of values only when dealing\r\n                // with Map structures.\r\n                if (isMap && !check(aValue, b.get(aKey))) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    // Otherwise the values are not equal.\r\n    return false;\r\n}\r\nfunction previouslyCompared(a, b) {\r\n    // Though cyclic references can make an object graph appear infinite from the\r\n    // perspective of a depth-first traversal, the graph still contains a finite\r\n    // number of distinct object references. We use the previousComparisons cache\r\n    // to avoid comparing the same pair of object references more than once, which\r\n    // guarantees termination (even if we end up comparing every object in one\r\n    // graph to every object in the other graph, which is extremely unlikely),\r\n    // while still allowing weird isomorphic structures (like rings with different\r\n    // lengths) a chance to pass the equality test.\r\n    var bSet = previousComparisons.get(a);\r\n    if (bSet) {\r\n        // Return true here because we can be sure false will be returned somewhere\r\n        // else if the objects are not equivalent.\r\n        if (bSet.has(b))\r\n            return true;\r\n    }\r\n    else {\r\n        previousComparisons.set(a, bSet = new Set);\r\n    }\r\n    bSet.add(b);\r\n    return false;\r\n}\n\nexport default equal;\nexport { equal };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}