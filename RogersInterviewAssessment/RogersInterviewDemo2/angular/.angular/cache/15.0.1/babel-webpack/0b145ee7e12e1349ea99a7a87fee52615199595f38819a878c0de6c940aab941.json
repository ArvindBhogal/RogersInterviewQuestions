{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { useCallback, useContext, useMemo, useRef, useState } from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from '@wry/equality';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { canUseWeakMap, canUseWeakSet, compact, isNonEmptyArray, maybeDeepFreeze } from \"../../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function useQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n  return useInternalState(useApolloClient(options.client), query).useQuery(options);\n}\nexport function useInternalState(client, query) {\n  var stateRef = useRef();\n  if (!stateRef.current || client !== stateRef.current.client || query !== stateRef.current.query) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  var state = stateRef.current;\n  var _a = useState(0),\n    _tick = _a[0],\n    setTick = _a[1];\n  state.forceUpdate = function () {\n    setTick(function (tick) {\n      return tick + 1;\n    });\n  };\n  return state;\n}\nvar InternalState = function () {\n  function InternalState(client, query, previous) {\n    this.client = client;\n    this.query = query;\n    this.asyncResolveFns = new Set();\n    this.optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)();\n    this.ssrDisabledResult = maybeDeepFreeze({\n      loading: true,\n      data: void 0,\n      error: void 0,\n      networkStatus: NetworkStatus.loading\n    });\n    this.skipStandbyResult = maybeDeepFreeze({\n      loading: false,\n      data: void 0,\n      error: void 0,\n      networkStatus: NetworkStatus.ready\n    });\n    this.toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)();\n    verifyDocumentType(query, DocumentType.Query);\n    var previousResult = previous && previous.result;\n    var previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n  InternalState.prototype.forceUpdate = function () {\n    __DEV__ && invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n  };\n  InternalState.prototype.asyncUpdate = function () {\n    var _this = this;\n    return new Promise(function (resolve) {\n      _this.asyncResolveFns.add(resolve);\n      _this.optionsToIgnoreOnce.add(_this.watchQueryOptions);\n      _this.forceUpdate();\n    });\n  };\n  InternalState.prototype.useQuery = function (options) {\n    var _this = this;\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n    this.useOptions(options);\n    var obsQuery = this.useObservableQuery();\n    var result = useSyncExternalStore(useCallback(function () {\n      if (_this.renderPromises) {\n        return function () {};\n      }\n      var onNext = function () {\n        var previousResult = _this.result;\n        var result = obsQuery.getCurrentResult();\n        if (previousResult && previousResult.loading === result.loading && previousResult.networkStatus === result.networkStatus && equal(previousResult.data, result.data)) {\n          return;\n        }\n        _this.setResult(result);\n      };\n      var onError = function (error) {\n        var last = obsQuery[\"last\"];\n        subscription.unsubscribe();\n        try {\n          obsQuery.resetLastResults();\n          subscription = obsQuery.subscribe(onNext, onError);\n        } finally {\n          obsQuery[\"last\"] = last;\n        }\n        if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n          throw error;\n        }\n        var previousResult = _this.result;\n        if (!previousResult || previousResult && previousResult.loading || !equal(error, previousResult.error)) {\n          _this.setResult({\n            data: previousResult && previousResult.data,\n            error: error,\n            loading: false,\n            networkStatus: NetworkStatus.error\n          });\n        }\n      };\n      var subscription = obsQuery.subscribe(onNext, onError);\n      return function () {\n        return subscription.unsubscribe();\n      };\n    }, [obsQuery, this.renderPromises, this.client.disableNetworkFetches]), function () {\n      return _this.getCurrentResult();\n    }, function () {\n      return _this.getCurrentResult();\n    });\n    this.unsafeHandlePartialRefetch(result);\n    var queryResult = this.toQueryResult(result);\n    if (!queryResult.loading && this.asyncResolveFns.size) {\n      this.asyncResolveFns.forEach(function (resolve) {\n        return resolve(queryResult);\n      });\n      this.asyncResolveFns.clear();\n    }\n    return queryResult;\n  };\n  InternalState.prototype.useOptions = function (options) {\n    var _a;\n    var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n    var currentWatchQueryOptions = this.watchQueryOptions;\n    if (this.optionsToIgnoreOnce.has(currentWatchQueryOptions) || !equal(watchQueryOptions, currentWatchQueryOptions)) {\n      this.watchQueryOptions = watchQueryOptions;\n      if (currentWatchQueryOptions && this.observable) {\n        this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n        this.observable.reobserve(this.getObsQueryOptions());\n        this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n        this.result = void 0;\n      }\n    }\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n    if ((this.renderPromises || this.client.disableNetworkFetches) && this.queryHookOptions.ssr === false && !this.queryHookOptions.skip) {\n      this.result = this.ssrDisabledResult;\n    } else if (this.queryHookOptions.skip || this.watchQueryOptions.fetchPolicy === 'standby') {\n      this.result = this.skipStandbyResult;\n    } else if (this.result === this.ssrDisabledResult || this.result === this.skipStandbyResult) {\n      this.result = void 0;\n    }\n  };\n  InternalState.prototype.getObsQueryOptions = function () {\n    var toMerge = [];\n    var globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n    toMerge.push(compact(this.observable && this.observable.options, this.watchQueryOptions));\n    return toMerge.reduce(mergeOptions);\n  };\n  InternalState.prototype.createWatchQueryOptions = function (_a) {\n    var _b;\n    if (_a === void 0) {\n      _a = {};\n    }\n    var skip = _a.skip,\n      ssr = _a.ssr,\n      onCompleted = _a.onCompleted,\n      onError = _a.onError,\n      defaultOptions = _a.defaultOptions,\n      otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"defaultOptions\"]);\n    var watchQueryOptions = Object.assign(otherOptions, {\n      query: this.query\n    });\n    if (this.renderPromises && (watchQueryOptions.fetchPolicy === 'network-only' || watchQueryOptions.fetchPolicy === 'cache-and-network')) {\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {};\n    }\n    if (skip) {\n      var _c = watchQueryOptions.fetchPolicy,\n        fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c,\n        _d = watchQueryOptions.initialFetchPolicy,\n        initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy: initialFetchPolicy,\n        fetchPolicy: 'standby'\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy = ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) || this.getDefaultFetchPolicy();\n    }\n    return watchQueryOptions;\n  };\n  InternalState.prototype.getDefaultFetchPolicy = function () {\n    var _a, _b;\n    return ((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"cache-first\";\n  };\n  InternalState.prototype.onCompleted = function (data) {};\n  InternalState.prototype.onError = function (error) {};\n  InternalState.prototype.useObservableQuery = function () {\n    var obsQuery = this.observable = this.renderPromises && this.renderPromises.getSSRObservable(this.watchQueryOptions) || this.observable || this.client.watchQuery(this.getObsQueryOptions());\n    this.obsQueryFields = useMemo(function () {\n      return {\n        refetch: obsQuery.refetch.bind(obsQuery),\n        reobserve: obsQuery.reobserve.bind(obsQuery),\n        fetchMore: obsQuery.fetchMore.bind(obsQuery),\n        updateQuery: obsQuery.updateQuery.bind(obsQuery),\n        startPolling: obsQuery.startPolling.bind(obsQuery),\n        stopPolling: obsQuery.stopPolling.bind(obsQuery),\n        subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery)\n      };\n    }, [obsQuery]);\n    var ssrAllowed = !(this.queryHookOptions.ssr === false || this.queryHookOptions.skip);\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n      if (obsQuery.getCurrentResult().loading) {\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n    return obsQuery;\n  };\n  InternalState.prototype.setResult = function (nextResult) {\n    var previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  };\n  InternalState.prototype.handleErrorOrCompleted = function (result) {\n    var _this = this;\n    if (!result.loading) {\n      Promise.resolve().then(function () {\n        if (result.error) {\n          _this.onError(result.error);\n        } else if (result.data) {\n          _this.onCompleted(result.data);\n        }\n      }).catch(function (error) {\n        __DEV__ && invariant.warn(error);\n      });\n    }\n  };\n  InternalState.prototype.getCurrentResult = function () {\n    if (!this.result) {\n      this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());\n    }\n    return this.result;\n  };\n  InternalState.prototype.toQueryResult = function (result) {\n    var queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n    var data = result.data,\n      partial = result.partial,\n      resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n    this.toQueryResultCache.set(result, queryResult = __assign(__assign(__assign({\n      data: data\n    }, resultWithoutPartial), this.obsQueryFields), {\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: !this.queryHookOptions.skip,\n      previousData: this.previousData\n    }));\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      queryResult.error = new ApolloError({\n        graphQLErrors: result.errors\n      });\n    }\n    return queryResult;\n  };\n  InternalState.prototype.unsafeHandlePartialRefetch = function (result) {\n    if (result.partial && this.queryHookOptions.partialRefetch && !result.loading && (!result.data || Object.keys(result.data).length === 0) && this.observable.options.fetchPolicy !== 'cache-only') {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch\n      });\n      this.observable.refetch();\n    }\n  };\n  return InternalState;\n}();","map":{"version":3,"names":["__assign","__rest","invariant","useCallback","useContext","useMemo","useRef","useState","useSyncExternalStore","equal","mergeOptions","getApolloContext","ApolloError","NetworkStatus","DocumentType","verifyDocumentType","useApolloClient","canUseWeakMap","canUseWeakSet","compact","isNonEmptyArray","maybeDeepFreeze","hasOwnProperty","Object","prototype","useQuery","query","options","create","useInternalState","client","stateRef","current","InternalState","state","_a","_tick","setTick","forceUpdate","tick","previous","asyncResolveFns","Set","optionsToIgnoreOnce","WeakSet","ssrDisabledResult","loading","data","error","networkStatus","skipStandbyResult","ready","toQueryResultCache","WeakMap","Map","Query","previousResult","result","previousData","__DEV__","warn","asyncUpdate","_this","Promise","resolve","add","watchQueryOptions","renderPromises","useOptions","obsQuery","useObservableQuery","onNext","getCurrentResult","setResult","onError","last","subscription","unsubscribe","resetLastResults","subscribe","call","disableNetworkFetches","unsafeHandlePartialRefetch","queryResult","toQueryResult","size","forEach","clear","createWatchQueryOptions","queryHookOptions","currentWatchQueryOptions","has","observable","delete","reobserve","getObsQueryOptions","onCompleted","ssr","skip","fetchPolicy","toMerge","globalDefaults","defaultOptions","watchQuery","push","reduce","_b","otherOptions","assign","variables","_c","getDefaultFetchPolicy","_d","initialFetchPolicy","getSSRObservable","obsQueryFields","refetch","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","then","catch","get","partial","resultWithoutPartial","set","called","errors","graphQLErrors","partialRefetch","keys","length"],"sources":["C:/Users/Arvind/Documents/RogersInterviewDemo2/angular/node_modules/@apollo/client/react/hooks/useQuery.js"],"sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { useCallback, useContext, useMemo, useRef, useState, } from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from '@wry/equality';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus, } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { canUseWeakMap, canUseWeakSet, compact, isNonEmptyArray, maybeDeepFreeze } from \"../../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function useQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    return useInternalState(useApolloClient(options.client), query).useQuery(options);\n}\nexport function useInternalState(client, query) {\n    var stateRef = useRef();\n    if (!stateRef.current ||\n        client !== stateRef.current.client ||\n        query !== stateRef.current.query) {\n        stateRef.current = new InternalState(client, query, stateRef.current);\n    }\n    var state = stateRef.current;\n    var _a = useState(0), _tick = _a[0], setTick = _a[1];\n    state.forceUpdate = function () {\n        setTick(function (tick) { return tick + 1; });\n    };\n    return state;\n}\nvar InternalState = (function () {\n    function InternalState(client, query, previous) {\n        this.client = client;\n        this.query = query;\n        this.asyncResolveFns = new Set();\n        this.optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)();\n        this.ssrDisabledResult = maybeDeepFreeze({\n            loading: true,\n            data: void 0,\n            error: void 0,\n            networkStatus: NetworkStatus.loading,\n        });\n        this.skipStandbyResult = maybeDeepFreeze({\n            loading: false,\n            data: void 0,\n            error: void 0,\n            networkStatus: NetworkStatus.ready,\n        });\n        this.toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)();\n        verifyDocumentType(query, DocumentType.Query);\n        var previousResult = previous && previous.result;\n        var previousData = previousResult && previousResult.data;\n        if (previousData) {\n            this.previousData = previousData;\n        }\n    }\n    InternalState.prototype.forceUpdate = function () {\n        __DEV__ && invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n    };\n    InternalState.prototype.asyncUpdate = function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            _this.asyncResolveFns.add(resolve);\n            _this.optionsToIgnoreOnce.add(_this.watchQueryOptions);\n            _this.forceUpdate();\n        });\n    };\n    InternalState.prototype.useQuery = function (options) {\n        var _this = this;\n        this.renderPromises = useContext(getApolloContext()).renderPromises;\n        this.useOptions(options);\n        var obsQuery = this.useObservableQuery();\n        var result = useSyncExternalStore(useCallback(function () {\n            if (_this.renderPromises) {\n                return function () { };\n            }\n            var onNext = function () {\n                var previousResult = _this.result;\n                var result = obsQuery.getCurrentResult();\n                if (previousResult &&\n                    previousResult.loading === result.loading &&\n                    previousResult.networkStatus === result.networkStatus &&\n                    equal(previousResult.data, result.data)) {\n                    return;\n                }\n                _this.setResult(result);\n            };\n            var onError = function (error) {\n                var last = obsQuery[\"last\"];\n                subscription.unsubscribe();\n                try {\n                    obsQuery.resetLastResults();\n                    subscription = obsQuery.subscribe(onNext, onError);\n                }\n                finally {\n                    obsQuery[\"last\"] = last;\n                }\n                if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n                    throw error;\n                }\n                var previousResult = _this.result;\n                if (!previousResult ||\n                    (previousResult && previousResult.loading) ||\n                    !equal(error, previousResult.error)) {\n                    _this.setResult({\n                        data: (previousResult && previousResult.data),\n                        error: error,\n                        loading: false,\n                        networkStatus: NetworkStatus.error,\n                    });\n                }\n            };\n            var subscription = obsQuery.subscribe(onNext, onError);\n            return function () { return subscription.unsubscribe(); };\n        }, [\n            obsQuery,\n            this.renderPromises,\n            this.client.disableNetworkFetches,\n        ]), function () { return _this.getCurrentResult(); }, function () { return _this.getCurrentResult(); });\n        this.unsafeHandlePartialRefetch(result);\n        var queryResult = this.toQueryResult(result);\n        if (!queryResult.loading && this.asyncResolveFns.size) {\n            this.asyncResolveFns.forEach(function (resolve) { return resolve(queryResult); });\n            this.asyncResolveFns.clear();\n        }\n        return queryResult;\n    };\n    InternalState.prototype.useOptions = function (options) {\n        var _a;\n        var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n        var currentWatchQueryOptions = this.watchQueryOptions;\n        if (this.optionsToIgnoreOnce.has(currentWatchQueryOptions) ||\n            !equal(watchQueryOptions, currentWatchQueryOptions)) {\n            this.watchQueryOptions = watchQueryOptions;\n            if (currentWatchQueryOptions && this.observable) {\n                this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n                this.observable.reobserve(this.getObsQueryOptions());\n                this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n                this.result = void 0;\n            }\n        }\n        this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n        this.onError = options.onError || InternalState.prototype.onError;\n        if ((this.renderPromises || this.client.disableNetworkFetches) &&\n            this.queryHookOptions.ssr === false &&\n            !this.queryHookOptions.skip) {\n            this.result = this.ssrDisabledResult;\n        }\n        else if (this.queryHookOptions.skip ||\n            this.watchQueryOptions.fetchPolicy === 'standby') {\n            this.result = this.skipStandbyResult;\n        }\n        else if (this.result === this.ssrDisabledResult ||\n            this.result === this.skipStandbyResult) {\n            this.result = void 0;\n        }\n    };\n    InternalState.prototype.getObsQueryOptions = function () {\n        var toMerge = [];\n        var globalDefaults = this.client.defaultOptions.watchQuery;\n        if (globalDefaults)\n            toMerge.push(globalDefaults);\n        if (this.queryHookOptions.defaultOptions) {\n            toMerge.push(this.queryHookOptions.defaultOptions);\n        }\n        toMerge.push(compact(this.observable && this.observable.options, this.watchQueryOptions));\n        return toMerge.reduce(mergeOptions);\n    };\n    InternalState.prototype.createWatchQueryOptions = function (_a) {\n        var _b;\n        if (_a === void 0) { _a = {}; }\n        var skip = _a.skip, ssr = _a.ssr, onCompleted = _a.onCompleted, onError = _a.onError, defaultOptions = _a.defaultOptions, otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"defaultOptions\"]);\n        var watchQueryOptions = Object.assign(otherOptions, { query: this.query });\n        if (this.renderPromises &&\n            (watchQueryOptions.fetchPolicy === 'network-only' ||\n                watchQueryOptions.fetchPolicy === 'cache-and-network')) {\n            watchQueryOptions.fetchPolicy = 'cache-first';\n        }\n        if (!watchQueryOptions.variables) {\n            watchQueryOptions.variables = {};\n        }\n        if (skip) {\n            var _c = watchQueryOptions.fetchPolicy, fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c, _d = watchQueryOptions.initialFetchPolicy, initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;\n            Object.assign(watchQueryOptions, {\n                initialFetchPolicy: initialFetchPolicy,\n                fetchPolicy: 'standby',\n            });\n        }\n        else if (!watchQueryOptions.fetchPolicy) {\n            watchQueryOptions.fetchPolicy =\n                ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) ||\n                    this.getDefaultFetchPolicy();\n        }\n        return watchQueryOptions;\n    };\n    InternalState.prototype.getDefaultFetchPolicy = function () {\n        var _a, _b;\n        return (((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) ||\n            ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) ||\n            \"cache-first\");\n    };\n    InternalState.prototype.onCompleted = function (data) { };\n    InternalState.prototype.onError = function (error) { };\n    InternalState.prototype.useObservableQuery = function () {\n        var obsQuery = this.observable =\n            this.renderPromises\n                && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n                || this.observable\n                || this.client.watchQuery(this.getObsQueryOptions());\n        this.obsQueryFields = useMemo(function () { return ({\n            refetch: obsQuery.refetch.bind(obsQuery),\n            reobserve: obsQuery.reobserve.bind(obsQuery),\n            fetchMore: obsQuery.fetchMore.bind(obsQuery),\n            updateQuery: obsQuery.updateQuery.bind(obsQuery),\n            startPolling: obsQuery.startPolling.bind(obsQuery),\n            stopPolling: obsQuery.stopPolling.bind(obsQuery),\n            subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n        }); }, [obsQuery]);\n        var ssrAllowed = !(this.queryHookOptions.ssr === false ||\n            this.queryHookOptions.skip);\n        if (this.renderPromises && ssrAllowed) {\n            this.renderPromises.registerSSRObservable(obsQuery);\n            if (obsQuery.getCurrentResult().loading) {\n                this.renderPromises.addObservableQueryPromise(obsQuery);\n            }\n        }\n        return obsQuery;\n    };\n    InternalState.prototype.setResult = function (nextResult) {\n        var previousResult = this.result;\n        if (previousResult && previousResult.data) {\n            this.previousData = previousResult.data;\n        }\n        this.result = nextResult;\n        this.forceUpdate();\n        this.handleErrorOrCompleted(nextResult);\n    };\n    InternalState.prototype.handleErrorOrCompleted = function (result) {\n        var _this = this;\n        if (!result.loading) {\n            Promise.resolve().then(function () {\n                if (result.error) {\n                    _this.onError(result.error);\n                }\n                else if (result.data) {\n                    _this.onCompleted(result.data);\n                }\n            }).catch(function (error) {\n                __DEV__ && invariant.warn(error);\n            });\n        }\n    };\n    InternalState.prototype.getCurrentResult = function () {\n        if (!this.result) {\n            this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());\n        }\n        return this.result;\n    };\n    InternalState.prototype.toQueryResult = function (result) {\n        var queryResult = this.toQueryResultCache.get(result);\n        if (queryResult)\n            return queryResult;\n        var data = result.data, partial = result.partial, resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n        this.toQueryResultCache.set(result, queryResult = __assign(__assign(__assign({ data: data }, resultWithoutPartial), this.obsQueryFields), { client: this.client, observable: this.observable, variables: this.observable.variables, called: !this.queryHookOptions.skip, previousData: this.previousData }));\n        if (!queryResult.error && isNonEmptyArray(result.errors)) {\n            queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n        }\n        return queryResult;\n    };\n    InternalState.prototype.unsafeHandlePartialRefetch = function (result) {\n        if (result.partial &&\n            this.queryHookOptions.partialRefetch &&\n            !result.loading &&\n            (!result.data || Object.keys(result.data).length === 0) &&\n            this.observable.options.fetchPolicy !== 'cache-only') {\n            Object.assign(result, {\n                loading: true,\n                networkStatus: NetworkStatus.refetch,\n            });\n            this.observable.refetch();\n        }\n    };\n    return InternalState;\n}());\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}