{"ast":null,"code":"import data from '../../assets/dataModified.json';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/contentful.service\";\nimport * as i2 from \"@angular/common\";\nfunction ItemsComponent_div_0_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\")(1, \"div\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const category_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", category_r3.value, \" \");\n  }\n}\nfunction ItemsComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 1)(2, \"div\", 2)(3, \"h3\", 3)(4, \"a\", 4);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, ItemsComponent_div_0_span_6_Template, 3, 1, \"span\", 0);\n    i0.ɵɵpipe(7, \"keyvalue\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"p\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const entry_r1 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"href\", entry_r1.url, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", entry_r1.title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(7, 4, entry_r1.category));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", entry_r1.description, \" \");\n  }\n}\nexport class ItemsComponent {\n  /* testObject object definition to temporarily test the REST API call, currently unused but commented for reference */\n  // testObject: {\n  //   url: string,\n  //   title: string,\n  //   description: string,\n  //   isNoIndex: Boolean,\n  // } = {\n  //   url: \"\",\n  //   title: \"\",\n  //   description: \"\",\n  //   isNoIndex: false,\n  // }\n  constructor(api) {\n    this.api = api;\n    /* testData object definition to store modified data as specified in part 4 */\n    this.testData = [];\n  }\n  ngOnInit() {\n    /* Parses the data modified from 4 for the application to read */\n    this.testData = JSON.parse(JSON.stringify(data));\n    /* The code below uses a GrasphQL call specified in 3 to retrieve data.\r\n    This data was manually stored in \"data.json\" for now, but the call request and\r\n    results can be seen in developer tools */\n    this.api.retrieveGraphQLContent().subscribe(data => {\n      console.log(data);\n    });\n    /* parseJson() accepts the data returned from step 3 and modifies it to fit the requirements of step 4\r\n    Presently, this is uncommented as the data from here has been stored to dataModified.json\r\n    and as such, there is no need to run this function every time */\n    // this.parseJSON(this.testData);\n    /* Code below was to test the REST api call and store required information into an object */\n    // this.api.retrieveContent().subscribe((data) => {\n    //   this.testObject.url = data.items[0].fields.url;\n    //   this.testObject.seoTitle = data.includes.Entry[0].fields.title;\n    //   this.testObject.description = data.includes.Entry[0].fields.description;\n    //   this.testObject.isNoIndex = data.includes.Entry[0].fields.isNoIndex;\n    //   console.log(this.testObject);\n    // })\n  }\n\n  parseJSON(testData) {\n    for (let item in testData) {\n      var newObj = {\n        url: \"\",\n        title: \"\",\n        description: \"\",\n        isNoIndex: false,\n        category: {}\n      };\n      var tmpArray = [];\n      if (testData[item].seo === null) {\n        continue;\n      } else {\n        testData[item].url = testData[item].url.replace(\"/home\", \"\");\n        tmpArray = testData[item].url.split(\"/\");\n        tmpArray.shift();\n        for (let category in tmpArray) {\n          let stringTry = (+category + 1).toString();\n          tmpArray[category] = tmpArray[category].charAt(0).toUpperCase() + tmpArray[category].slice(1);\n          newObj.category[stringTry] = tmpArray[category];\n        }\n        testData[item].url = testData[item].url.replace(\"/\", \"https://www.rogers.com/\");\n        newObj.url = testData[item].url;\n        newObj.title = testData[item].seo.title;\n        newObj.description = testData[item].seo.description.substring(0, 80);\n        newObj.isNoIndex = testData[item].seo.isNoIndex;\n        testData[item] = newObj;\n      }\n    }\n  }\n  static #_ = this.ɵfac = function ItemsComponent_Factory(t) {\n    return new (t || ItemsComponent)(i0.ɵɵdirectiveInject(i1.ContentfulService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ItemsComponent,\n    selectors: [[\"app-items\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngFor\", \"ngForOf\"], [1, \"card\", 2, \"width\", \"40rem\", \"margin-top\", \"1%\", \"margin-left\", \"2%\"], [1, \"card-body\"], [1, \"card-title\"], [3, \"href\"], [1, \"badge\", \"badge-secondary\", 2, \"margin-left\", \"1%\"]],\n    template: function ItemsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ItemsComponent_div_0_Template, 10, 6, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.testData);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.KeyValuePipe],\n    styles: [\"a[_ngcontent-%COMP%] {\\r\\n  color: #2f6fa7;\\r\\n}\\r\\n\\r\\nh5[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  font-size: 2rem;\\r\\n  font-weight: 600;\\r\\n  line-height: 1.3;\\r\\n  margin-bottom: 1.6rem;\\r\\n}\\r\\n\\r\\n.badge[_ngcontent-%COMP%]{\\r\\n  font-size: 1rem;\\r\\n  display: inline-block;\\r\\n  background-color: lightgray;\\r\\n  color: black;\\r\\n}\\n/*# sourceURL=webpack://./src/app/items/items.component.css */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvaXRlbXMvaXRlbXMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLGVBQWU7RUFDZixnQkFBZ0I7RUFDaEIsZ0JBQWdCO0VBQ2hCLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLGVBQWU7RUFDZixxQkFBcUI7RUFDckIsMkJBQTJCO0VBQzNCLFlBQVk7QUFDZCIsInNvdXJjZXNDb250ZW50IjpbImEge1xyXG4gIGNvbG9yOiAjMmY2ZmE3O1xyXG59XHJcblxyXG5oNSB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGZvbnQtc2l6ZTogMnJlbTtcclxuICBmb250LXdlaWdodDogNjAwO1xyXG4gIGxpbmUtaGVpZ2h0OiAxLjM7XHJcbiAgbWFyZ2luLWJvdHRvbTogMS42cmVtO1xyXG59XHJcblxyXG4uYmFkZ2V7XHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7XHJcbiAgY29sb3I6IGJsYWNrO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["data","i0","ItemsComponent","constructor","api","ngOnInit","testData","JSON","parse","stringify","retrieveGraphQLContent","subscribe","console","log","parseJSON","item","newObj","url","title","description","isNoIndex","category","tmpArray","seo","replace","split","shift","stringTry","toString","charAt","toUpperCase","slice","substring","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Arvind\\Documents\\RogersInterviewDemo2\\angular\\src\\app\\items\\items.component.ts","C:\\Users\\Arvind\\Documents\\RogersInterviewDemo2\\angular\\src\\app\\items\\items.component.html"],"sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\nimport { ContentfulService } from '../services/contentful.service';\nimport data from '../../assets/dataModified.json';\n\n@Component({\n  selector: 'app-items',\n  templateUrl: './items.component.html',\n  styleUrls: ['./items.component.css']\n})\nexport class ItemsComponent implements OnInit {\n\n  /* testData object definition to store modified data as specified in part 4 */\n  testData: {\n    url: string,\n    title: string,\n    description: string,\n    isNoIndex: Boolean,\n    category: {\n      [key: string]: any;\n    }}[] = [];\n\n  /* testObject object definition to temporarily test the REST API call, currently unused but commented for reference */\n\n  // testObject: {\n  //   url: string,\n  //   title: string,\n  //   description: string,\n  //   isNoIndex: Boolean,\n  // } = {\n  //   url: \"\",\n  //   title: \"\",\n  //   description: \"\",\n  //   isNoIndex: false,\n  // }\n\n  constructor(\n    private api: ContentfulService,\n  ) {}\n\n\n\n  ngOnInit() {\n    /* Parses the data modified from 4 for the application to read */\n    this.testData = JSON.parse(JSON.stringify(data));\n\n    /* The code below uses a GrasphQL call specified in 3 to retrieve data.\n    This data was manually stored in \"data.json\" for now, but the call request and\n    results can be seen in developer tools */\n\n    this.api.retrieveGraphQLContent().subscribe((data) => {\n      console.log(data);\n    })\n\n    /* parseJson() accepts the data returned from step 3 and modifies it to fit the requirements of step 4\n    Presently, this is uncommented as the data from here has been stored to dataModified.json\n    and as such, there is no need to run this function every time */\n\n    // this.parseJSON(this.testData);\n\n    /* Code below was to test the REST api call and store required information into an object */\n\n    // this.api.retrieveContent().subscribe((data) => {\n    //   this.testObject.url = data.items[0].fields.url;\n    //   this.testObject.seoTitle = data.includes.Entry[0].fields.title;\n    //   this.testObject.description = data.includes.Entry[0].fields.description;\n    //   this.testObject.isNoIndex = data.includes.Entry[0].fields.isNoIndex;\n    //   console.log(this.testObject);\n    // })\n  }\n\n  parseJSON(testData: any[]) {\n    for (let item in testData) {\n      var newObj: {\n        url: string,\n        title: string,\n        description: string,\n        isNoIndex: Boolean,\n        category: {\n          [key: string]: any;\n        },\n      } = {\n        url: \"\",\n        title: \"\",\n        description: \"\",\n        isNoIndex: false,\n        category: {},\n      };\n\n      var tmpArray = [];\n\n      if (testData[item].seo === null) {\n        continue;\n      } else {\n\n        testData[item].url = testData[item].url.replace(\"/home\", \"\");\n        tmpArray = testData[item].url.split(\"/\");\n        tmpArray.shift();\n\n        for (let category in tmpArray) {\n          let stringTry = (+category + 1).toString();\n          tmpArray[category] = tmpArray[category].charAt(0).toUpperCase()  + tmpArray[category].slice(1);\n          newObj.category[stringTry] = tmpArray[category];\n\n        }\n        testData[item].url = testData[item].url.replace(\"/\", \"https://www.rogers.com/\");\n        newObj.url = testData[item].url;\n        newObj.title = testData[item].seo.title;\n        newObj.description = testData[item].seo.description.substring(0, 80);\n        newObj.isNoIndex = testData[item].seo.isNoIndex;\n\n        testData[item] = newObj;\n      }\n    }\n  }\n}\n","<div *ngFor=\"let entry of testData\">\n  <div class=\"card\" style=\"width: 40rem; margin-top: 1%; margin-left: 2%;\">\n    <div class=\"card-body\">\n      <h3 class=\"card-title\">\n        <a [href]=\"entry.url\">\n          {{ entry.title }}\n        </a>\n        <span *ngFor=\"let category of entry.category | keyvalue\">\n          <div class=\"badge badge-secondary\" style=\"margin-left: 1%;\">\n            {{ category.value }}\n          </div>\n        </span>\n      </h3>\n      <p> {{ entry.description }} </p>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}